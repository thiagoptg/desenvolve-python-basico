#Q1 Escreva um script Python que solicita uma frase do usu√°rio e a salve em um arquivo chamado "frase.txt" no mesmo local do seu script. Imprima em seguida o caminho completo do arquivo salvo.

#Digite uma frase: Bom dia, meu nome √© Davi.

#Frase salva em /Users/laranjeira/python-basico/frase.txt


import os

def main():
    frase = input("Digite uma frase: ")

    nome_arquivo = "frase.txt"

    # Abre o arquivo para escrita (cria se n√£o existir)
    with open(nome_arquivo, "w", encoding="utf-8") as arquivo:
        arquivo.write(frase)

    # Obt√©m o caminho absoluto do arquivo
    caminho_completo = os.path.abspath(nome_arquivo)

    print(f"Frase salva em {caminho_completo}")

if __name__ == "__main__":
    main()


#Q2 Escreva um script que leia o arquivo salvo no exerc√≠cio anterior e salva em um novo arquivo "palavras.txt", removendo todos os espa√ßos em branco e caracteres n√£o alfab√©ticos, e separando cada palavra em uma linha. Ao final, imprima o conte√∫do do arquivo "palavras.txt".

#Bom

#dia

#meu

#nome

#√©

#Davi

import os
import string

def main():
    arquivo_origem = "frase.txt"
    arquivo_destino = "palavras.txt"

    # L√™ o conte√∫do do arquivo original
    with open(arquivo_origem, "r", encoding="utf-8") as f:
        conteudo = f.read()

    # Remove caracteres n√£o alfab√©ticos, mantendo letras acentuadas
    palavras = []
    for palavra in conteudo.split():
        palavra_limpa = "".join(c for c in palavra if c.isalpha())
        if palavra_limpa:  # evita strings vazias
            palavras.append(palavra_limpa)

    # Salva cada palavra em uma linha no novo arquivo
    with open(arquivo_destino, "w", encoding="utf-8") as f:
        for palavra in palavras:
            f.write(palavra + "\n")

    # Imprime o conte√∫do do novo arquivo
    print("Conte√∫do de 'palavras.txt':")
    with open(arquivo_destino, "r", encoding="utf-8") as f:
        print(f.read())

if __name__ == "__main__":
    main()


#Q3 Baixe o arquivo contendo o roteiro do filme brasileiro "Est√¥mago" e salve em seu computador com o nome "estomago.txt". Em seguida crie um script em Python que abra o arquivo para leitura e imprima:
#O texto das primeiras 25 linhas
#O n√∫mero de linhas do arquivo
#A linha com maior n√∫mero de caracteres
#O n√∫mero de men√ß√µes aos nomes dos personagens "Nonato" e "√çria" (inclua todas as varia√ß√µes de mai√∫sculas e min√∫sculas e aten√ß√£o para n√£o incluir a substring "iria" se ela fizer parte de outras palavras).


import re

# Abrir o arquivo para leitura
with open("estomago.txt", "r", encoding="utf-8") as f:
    linhas = f.readlines()

# 1. Imprimir as primeiras 25 linhas
print("üîπ Primeiras 25 linhas do roteiro:\n")
for linha in linhas[:25]:
    print(linha.strip())

# 2. N√∫mero de linhas do arquivo
num_linhas = len(linhas)
print(f"\nüîπ N√∫mero total de linhas: {num_linhas}")

# 3. Linha com maior n√∫mero de caracteres
linha_maior = max(linhas, key=len)
print(f"\nüîπ Linha com maior n√∫mero de caracteres:\n{linha_maior.strip()}")

# 4. Contagem de men√ß√µes aos nomes "Nonato" e "√çria"
texto_completo = " ".join(linhas)

# Regex para encontrar "Nonato" e "√çria" com varia√ß√µes de mai√∫sculas/min√∫sculas
nonato_count = len(re.findall(r"\bnonato\b", texto_completo, re.IGNORECASE))
iria_count = len(re.findall(r"\b√≠ria\b", texto_completo, re.IGNORECASE))

print(f"\nüîπ Men√ß√µes ao personagem 'Nonato': {nonato_count}")
print(f"üîπ Men√ß√µes ao personagem '√çria': {iria_count}")

#Q4 Vamos fazer o jogo da forca! Antes de programar:
#Crie um arquivo no seu computador chamado "gabarito_forca.txt" com uma lista de 10 palavras de sua escolha (separadas por quebras de linha, "\n"). Essas ser√£o as op√ß√µes de palavra do jogo.
#Crie um arquivo chamado "gabarito_enforcado.txt" com o conte√∫do apresentado ao final dessa quest√£o.
#Escreva um programa em Python para executar o jogo, de acordo com as defini√ß√µes:
#Abra o arquivo "gabarito_forca.txt" e escolha aleatoriamente uma palavra;
#Com o arquivo "gabarito_enforcado.txt", crie uma lista de strings com os est√°gios do enforcado;
#No in√≠cio exiba o n√∫mero de letras na palavra como underscores;
#Permita que o jogador insira letras para adivinhar a palavra;
#Em caso de acerto, mostre o progresso do jogador substituindo os underscores correspondentes √† letra digitada;
#Em caso de erro, crie a fun√ß√£o "imprime_enforcado()" que recebe um inteiro indicando o n√∫mero de erros do jogador e imprime o enforcado correspondente;
#Limite o n√∫mero de tentativas para 6 (as partes do enforcado).
#gabarito_enforcado.txt

import random

# Fun√ß√£o para imprimir o enforcado
def imprime_enforcado(erros, estagios):
    print(estagios[erros])

# Carregar palavras
with open("gabarito_forca.txt", "r", encoding="utf-8") as f:
    palavras = [linha.strip().lower() for linha in f if linha.strip()]

# Escolher uma palavra aleat√≥ria
palavra = random.choice(palavras)
letras_descobertas = ["_" for _ in palavra]
letras_usadas = set()

# Carregar est√°gios do enforcado
with open("gabarito_enforcado.txt", "r", encoding="utf-8") as f:
    conteudo = f.read()
    estagios = conteudo.strip().split("=========\n")
    estagios = [estagio.strip() + "\n=========" for estagio in estagios]

# Jogo
erros = 0
MAX_ERROS = 6

print("üéØ Bem-vindo ao Jogo da Forca!")
print(f"A palavra tem {len(palavra)} letras: {' '.join(letras_descobertas)}")

while erros < MAX_ERROS and "_" in letras_descobertas:
    letra = input("\nDigite uma letra: ").lower()

    if not letra.isalpha() or len(letra) != 1:
        print("‚ö†Ô∏è Digite apenas uma letra v√°lida.")
        continue

    if letra in letras_usadas:
        print("üîÅ Voc√™ j√° tentou essa letra.")
        continue

    letras_usadas.add(letra)

    if letra in palavra:
        for i, l in enumerate(palavra):
            if l == letra:
                letras_descobertas[i] = letra
        print("‚úÖ Letra correta!")
    else:
        erros += 1
        print("‚ùå Letra incorreta!")
        imprime_enforcado(erros, estagios)

    print(f"\nPalavra: {' '.join(letras_descobertas)}")
    print(f"Letras usadas: {', '.join(sorted(letras_usadas))}")
    print(f"Erros: {erros}/{MAX_ERROS}")

# Resultado final
if "_" not in letras_descobertas:
    print("\nüéâ Parab√©ns! Voc√™ acertou a palavra!")
else:
    print("\nüíÄ Voc√™ perdeu! A palavra era:", palavra)
    imprime_enforcado(MAX_ERROS, estagios)

 #Q5 A extens√£o ".csv" significa "comma-separated values" ou "valores separados por v√≠rgula". √â a extens√£o utilizada por sistemas de ger√™ncia de tabelas como o Microsoft Excel ou Google Sheets. Nesse exerc√≠cio vamos criar uma planilha com dados sobre livros que voc√™ j√° leu ou gostaria de ler. Siga as instru√ß√µes.

#Selecione pelo menos 10 livros que voc√™ leu ou gostaria de ler. Voc√™ deve reunir as seguintes informa√ß√µes: t√≠tulo, autor, ano de publica√ß√£o e n√∫mero de p√°ginas.

#No Python, crie um arquivo chamado "meus_livros.csv", aberto para escrita.

#Na primeira linha escreva os t√≠tulos da planilha separados por v√≠rgula (sem espa√ßo em branco). Os t√≠tulos s√£o: "T√≠tulo", "Autor", "Ano de publica√ß√£o" e "N√∫mero de p√°ginas". Lembre de finalizar a linha com uma quebra de linha.

#A partir da segunda linha escreva as informa√ß√µes de cada livro que voc√™ levantou, separando cada informa√ß√£o por uma v√≠rgula (sem espa√ßo em branco). Lembre de finalizar cada linha com uma quebra de linha.

#Feche o arquivo para salv√°-lo e abra com a ferramenta de planilhas de sua escolha. Como voc√™ j√° tem conta no Google, sugiro abrir com o Google Sheets.


livros = [
    ["O Ca√ßador de Pipas", "Khaled Hosseini", 2003, 368],
    ["Torto Arado", "Itamar Vieira Junior", 2019, 264],
    ["1984", "George Orwell", 1949, 328],
    ["Dom Casmurro", "Machado de Assis", 1899, 256],
    ["A Revolu√ß√£o dos Bichos", "George Orwell", 1945, 152],
    ["Grande Sert√£o: Veredas", "Jo√£o Guimar√£es Rosa", 1956, 624],
    ["O Pequeno Pr√≠ncipe", "Antoine de Saint-Exup√©ry", 1943, 96],
    ["Capit√£es da Areia", "Jorge Amado", 1937, 288],
    ["Ensaio Sobre a Cegueira", "Jos√© Saramago", 1995, 312],
    ["O Nome da Rosa", "Umberto Eco", 1980, 512]
]

# Criar e escrever no arquivo CSV
with open("meus_livros.csv", "w", encoding="utf-8") as f:
    # Cabe√ßalho
    f.write("T√≠tulo,Autor,Ano de publica√ß√£o,N√∫mero de p√°ginas\n")
    
    # Dados dos livros
    for livro in livros:
        linha = f"{livro[0]},{livro[1]},{livro[2]},{livro[3]}\n"
        f.write(linha)

print("‚úÖ Arquivo 'meus_livros.csv' criado com sucesso!")

#Q6 


import csv

def musica_top_por_ano(arquivo_csv):
    resultado = {}
    with open(arquivo_csv, "r", encoding="latin-1") as f:
        leitor = csv.DictReader(f)

        for linha in leitor:
            try:
                ano = int(linha["released_year"])
                if 2012 <= ano <= 2022:
                    nome = linha["track_name"]
                    artista = linha["artist(s)_name"]
                    streams = int(linha["streams"])

                    # verifica se j√° temos uma m√∫sica para este ano
                    if ano not in resultado or streams > resultado[ano][3]:
                        resultado[ano] = [nome, artista, ano, streams]
            except ValueError:
                # ignora linhas com valores estranhos
                continue

    # organiza a sa√≠da em lista ordenada por ano
    lista_final = [resultado[ano] for ano in sorted(resultado.keys())]
    return lista_final


# Exemplo de uso:
arquivo = "spotify-2023.csv"
top10 = musica_top_por_ano(arquivo)
print(top10)
